  enhancervalt <- as.character(seqGetData(genofile,"$alt"))
  dfHancerVarGene <- data.frame(enhancervchr,enhancervpos,enhancervref,enhancervalt,enhancer2GENE)
  ## get SNV id
  SNVlist <- (filter == "PASS") & isSNV(genofile)
  variant.id <- seqGetData(genofile, "variant.id")
  variant.id.SNV <- variant.id[SNVlist]
  dfHancerVarGene.SNV <- dfHancerVarGene[SNVlist,]
  dfHancerVarGene.SNV$enhancervpos <- as.character(dfHancerVarGene.SNV$enhancervpos)
  dfHancerVarGene.SNV$enhancervref <- as.character(dfHancerVarGene.SNV$enhancervref)
  dfHancerVarGene.SNV$enhancervalt <- as.character(dfHancerVarGene.SNV$enhancervalt)
  seqResetFilter(genofile)
  seqResetFilter(genofile)
 seqResetFilter(genofile)
  #Now extract the GeneHancer with CAGE Signal Overlay
  genehancerAnno <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GeneHancer")]))
  genehancer <- genehancerAnno!=""
  CAGEAnno <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="CAGE")]))
  CAGE <- CAGEAnno!=""
  CAGEGeneHancervt <- CAGEAnno!=""&genehancerAnno!=""
  CAGEGeneHanceridx <- which(CAGEGeneHancervt,useNames=TRUE)
  seqSetFilter(genofile,variant.id=varid[CAGEGeneHanceridx])
  # variants that covered by whole GeneHancer without CAGE overlap.
  genehancerSet <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GeneHancer")]))
  enhancerGene <- unlist(lapply(strsplit(genehancerSet,"="),`[[`,4))
  enhancer2GENE <- unlist(lapply(strsplit(enhancerGene,";"),`[[`,1))
  enhancervchr <- as.numeric(seqGetData(genofile,"chromosome"))
  enhancervpos <- as.numeric(seqGetData(genofile,"position"))
  enhancervref <- as.character(seqGetData(genofile,"$ref"))
  enhancervalt <- as.character(seqGetData(genofile,"$alt"))
  dfHancerVarGene <- data.frame(enhancervchr,enhancervpos,enhancervref,enhancervalt,enhancer2GENE)
  ## get SNV id
  filter <- seqGetData(genofile, QC_label)
  SNVlist <- (filter == "PASS") & isSNV(genofile)
  variant.id <- seqGetData(genofile, "variant.id")
  variant.id.SNV <- variant.id[SNVlist]
  dfHancerVarGene.SNV <- dfHancerVarGene[SNVlist,]
  dfHancerVarGene.SNV$enhancervpos <- as.character(dfHancerVarGene.SNV$enhancervpos)
  dfHancerVarGene.SNV$enhancervref <- as.character(dfHancerVarGene.SNV$enhancervref)
  dfHancerVarGene.SNV$enhancervalt <- as.character(dfHancerVarGene.SNV$enhancervalt)
  seqResetFilter(genofile)
  ### Gene
  is.in <- which(dfHancerVarGene.SNV[,5]==gene_name)
  variant.is.in <- variant.id.SNV[is.in]
  seqSetFilter(genofile,variant.id=variant.is.in,sample.id=phenotype.id)
  # save them
  tempDat <- data.frame(chr = seqGetData(genofile, "chromosome"),
                        pos = seqGetData(genofile, "position"),
                        ID = seqGetData(genofile, "variant.id"),
                        type = "enhancer_cage")
  allDat <- rbind(allDat, tempDat)
  id.genotype <- seqGetData(genofile,"sample.id")
  tempGeno <- seqGetData(genofile, "annotation/format/DS")
  allGeno <- cbind(allGeno, tempGeno)
  ##################################################
  #       Enhancer-DHS
  seqResetFilter(genofile)
  
  rOCRsAnno <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="DHS")]))
  rOCRs <- rOCRsAnno!=""
  rOCRsGeneHancervt <- rOCRsAnno!=""&genehancerAnno!=""
  rOCRsGeneHanceridx <- which(rOCRsGeneHancervt,useNames=TRUE)
  seqSetFilter(genofile,variant.id=varid[rOCRsGeneHanceridx])
  # variants that covered by whole GeneHancer without rOCRs overlap.
  genehancerSet <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GeneHancer")]))
  enhancerGene <- unlist(lapply(strsplit(genehancerSet,"="),`[[`,4))
  enhancer2GENE <- unlist(lapply(strsplit(enhancerGene,";"),`[[`,1))
  enhancervchr <- as.numeric(seqGetData(genofile,"chromosome"))
  enhancervpos <- as.numeric(seqGetData(genofile,"position"))
  enhancervref <- as.character(seqGetData(genofile,"$ref"))
  enhancervalt <- as.character(seqGetData(genofile,"$alt"))
  dfHancerVarGene <- data.frame(enhancervchr,enhancervpos,enhancervref,enhancervalt,enhancer2GENE)
  ## get SNV id
  filter <- seqGetData(genofile, QC_label)
  SNVlist <- (filter == "PASS") & isSNV(genofile)
  variant.id <- seqGetData(genofile, "variant.id")
  variant.id.SNV <- variant.id[SNVlist]
  dfHancerVarGene.SNV <- dfHancerVarGene[SNVlist,]
  dfHancerVarGene.SNV$enhancervpos <- as.character(dfHancerVarGene.SNV$enhancervpos)
  dfHancerVarGene.SNV$enhancervref <- as.character(dfHancerVarGene.SNV$enhancervref)
  dfHancerVarGene.SNV$enhancervalt <- as.character(dfHancerVarGene.SNV$enhancervalt)
  seqResetFilter(genofile)
  ### Gene
  is.in <- which(dfHancerVarGene.SNV[,5]==gene_name)
  variant.is.in <- variant.id.SNV[is.in]
  seqSetFilter(genofile,variant.id=variant.is.in,sample.id=phenotype.id)
  # save them
  tempDat <- data.frame(chr = seqGetData(genofile, "chromosome"),
                        pos = seqGetData(genofile, "position"),
                        ID = seqGetData(genofile, "variant.id"),
                        type = "enhancer_cage")
  allDat <- rbind(allDat, tempDat)
  ## genotype id
  id.genotype <- seqGetData(genofile,"sample.id")
  tempGeno <- seqGetData(genofile, "annotation/format/DS")
  allGeno <- cbind(allGeno, tempGeno)
gene_name
  write.table(allDat,  paste0("/rsrch3/home/biostatistics/rsun3/sjlife/applicationPaper/", gene_name, "_infofile.txt"), append=F, quote=F, row.names=F, col.names=F, sep='\t')
  write.table(allGeno, paste0("/rsrch3/home/biostatistics/rsun3/sjlife/applicationPaper/", gene_name, "_genofile.txt"), append=F, quote=F, row.names=F, col.names=F, sep='\t')
seqClose(genofile)
kk=2
  genes <- genes_info %>% filter(hgnc_symbol %in% geneVec)
  chr <- genes$chromosome_name[kk]
genes
kk
  ### gds file
  gds.path <- agds_dir[chr]
  genofile <- seqOpen(gds.path)
  # where to save
  allDat <- c()
  allGeno <- c()
  print(kk)
  gene_name <- genes$hgnc_symbol[kk]
  seqResetFilter(genofile)
  pheno_it <- 3
  obj_nullmodel=nullModList[[pheno_it]]
  rare_maf_cutoff=0.01
  rv_num_cutoff=2
  silent=FALSE
phenotype.id <- as.character(obj_nullmodel$id_include)
  #####################################
  #   Gene Info
  ## get SNV id
  filter <- seqGetData(genofile, QC_label)
  SNVlist <- (filter == "PASS") & isSNV(genofile)
  variant.id <- seqGetData(genofile, "variant.id")
  ########################################
  #   Downstream
  GENCODE.Category <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GENCODE.Category")]))
  is.in <- (GENCODE.Category=="downstream")&(SNVlist)
  variant.id.downstream <- variant.id[is.in]
  seqSetFilter(genofile,variant.id=variant.id.downstream,sample.id=phenotype.id)
  # get the genes of the downstream snps
  GENCODE.Info <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GENCODE.Info")]))
  GENCODE.Info.split <- strsplit(GENCODE.Info, split = "[,]")
  variant_gene_num <- sapply(GENCODE.Info.split,function(z) length(z))
  variant.id.SNV <- seqGetData(genofile, "variant.id")
  variant.id.SNV <- rep(variant.id.SNV,variant_gene_num)
  Gene <- as.character(unlist(GENCODE.Info.split))
  seqResetFilter(genofile)
  ### Gene
  is.in <- which(Gene==gene_name)
  variant.is.in <- variant.id.SNV[is.in]
  # now it's only the downstream snps for this gene
  seqSetFilter(genofile,variant.id=variant.is.in,sample.id=phenotype.id)
  # save them
  tempDat <- data.frame(chr = seqGetData(genofile, "chromosome"),
                        pos = seqGetData(genofile, "position"),
                        ID = seqGetData(genofile, "variant.id"),
                        type = "downstream")
  allDat <- rbind(allDat, tempDat)
  ## genotype id
  id.genotype <- seqGetData(genofile,"sample.id")
  tempGeno <- seqGetData(genofile, "annotation/format/DS")
  allGeno <- cbind(allGeno, tempGeno)
#   Upstream
  seqResetFilter(genofile)
  is.in <- (GENCODE.Category=="upstream")&(SNVlist)
  variant.id.upstream <- variant.id[is.in]
  seqSetFilter(genofile,variant.id=variant.id.upstream,sample.id=phenotype.id)
  # get the names of the upstream snps
  GENCODE.Info <- seqGetData(genofile, paste0(Annotation_dir,Annotation_name_catalog$dir[which(Annotation_name_catalog$name=="GENCODE.Info")]))
  GENCODE.Info.split <- strsplit(GENCODE.Info, split = "[,]")
  variant_gene_num <- sapply(GENCODE.Info.split,function(z) length(z))
  variant.id.SNV <- seqGetData(genofile, "variant.id")
  variant.id.SNV <- rep(variant.id.SNV,variant_gene_num)
  Gene <- as.character(unlist(GENCODE.Info.split))
  seqResetFilter(genofile)
  ### Gene
  is.in <- which(Gene==gene_name)
  variant.is.in <- variant.id.SNV[is.in]
  # now it's only the upstream snps for this gene
  seqSetFilter(genofile,variant.id=variant.is.in,sample.id=phenotype.id)
   # save them
  tempDat <- data.frame(chr = seqGetData(genofile, "chromosome"),
                        pos = seqGetData(genofile, "position"),
                        ID = seqGetData(genofile, "variant.id"),
                        type = "upstream")
  allDat <- rbind(allDat, tempDat)
  ## genotype id
  id.genotype <- seqGetData(genofile,"sample.id")
  tempGeno <- seqGetData(genofile, "annotation/format/DS")
  allGeno <- cbind(allGeno, tempGeno)
library(fastGHQuad)
library(tidyr)
library(SeqArray)
library(data.table)
library(dplyr)
library(magrittr)
library(Rcpp)
library(survival)
library(ICSKAT)
library(bindata)
source("/rsrch3/home/biostatistics/rsun3/github/ICSKAT/R/make_IC_dmat.R")
source("/rsrch3/home/biostatistics/rsun3/multiICSKAT/code/multphenoICSKAT.R")
source("/rsrch3/home/biostatistics/rsun3/multiICSKAT/code/multICSKAT_fit_null.R")
source("/rsrch3/home/biostatistics/rsun3/multiICSKAT/code/gen_ICmultpheno.R")
aID=24
Snum=1
# true parameters
doACAT <- FALSE
n <- 1000
D <- 100
p <- 2
B <- 10
setSize <- 20
bufferSNPs <- 100
bhFunInv <- function(x) {x}
obsTimes <- seq(from=1, to=4, by=0.5)
K <- 3
mafParam <- 0.5
# how many to do per parameter setting
runsPerParam <- 20
corrParam <- floor(aID / runsPerParam)
# power parameters
gammaMat <- matrix(data=0, nrow=setSize, ncol=K)
if (Snum == 1) {
  gammaMat[c(3, 11, 20), ] <- 0.5
} 
# output name
outRoot <- paste0("power_changeCorr_S", Snum, "_")
# output directory
outputDir <- "/rsrch3/home/biostatistics/rsun3/multiICSKAT/sep2023sims/output"
#--------------------------------------------------------------------------------------#
# to flip SNPs
flipSNPs <- function(x) {2 - x}
# fake genotypes
muGeno <- rep(mafParam, setSize)
genoCor <- matrix(data=corrParam, nrow=setSize, ncol=setSize)
diag(genoCor) = 1
cprob <- bincorr2commonprob(margprob = muGeno, bincorr = genoCor)
rmvbinSigma <- commonprob2sigma(commonprob = cprob)
genoCor
corrParam
aID
runsPerParam
# how many to do per parameter setting
runsPerParam <- 20
corrParam <- floor(aID / runsPerParam) * 0.1
corrParam
betaOpts <- cbind(c(0.1, 0.2),
                  c(0.14, 0.24))
betaMin <- betaOpts[1, ]
betaMax <- betaOpts[2, ]
betaMin
betaMax
betaMin <- c(0.10, 0.14)
betaMax <- c(0.20, 0.24)
betaMin
betaMax
betaOpts <- cbind(c(0.1, 0.2),
                  c(0.14, 0.24))
betaMin <- betaOpts[1, ]
betaMax <- betaOpts[2, ]
betaMin
betaMax
library(data.table)
library(dplyr)
origDir <- "/rsrch3/home/biostatistics/rsun3/empBayes/reproduce/SuppFig8/origOutput"
newDir <- "/rsrch3/home/biostatistics/rsun3/empBayes/reproduce/SuppFig8/output"
origNames <- c(paste0("sim_n1k_j100k_med2d_noalt_changepi0_randomeff_pi0_aID", 101:702, ".txt"),
              paste0("sim_n1k_j100k_med2d_raisealt_changepi0_randomeff_pi0_aID", 101:102, ".txt"),
              paste0("sim_n1k_j100k_ind3d_changepi0_raiseAlt_randomeff_aID", 101:702, ".txt"))
newNames <- origNames
for (file_it in 1:length(origNames)) {
  # open files
  setwd(origDir)
  origFile <- fread(origNames[file_it], data.table=F)
  setwd(newDir)
  newFile <- fread(newNames[file_it], data.table=F)
  commonCols <- intersect(colnames(origFile), colnames(newFile))
  origFile <- origFile %>% select(all_of(commonCols))
  newFile <- newFile %>% select(all_of(commonCols))
  # loop through columns
  for (col_it in 1:length(commonCols)) {
    err <- FALSE
    tempOrig <- origFile[, col_it]
    tempNew <- newFile[, col_it]
    whichNAOrig <- which(is.na(tempOrig))
    whichNANew <- which(is.na(tempNew))
    whichNumOrig <- which(!is.na(tempOrig))
    whichNumNew <- which(!is.na(tempNew))
    if (length(whichNAOrig) != length(whichNANew)) {
      err <- TRUE
    }
    if (sum(whichNAOrig == whichNANew) != length(whichNAOrig)) {
      err <- TRUE
    }
    if (sum(tempOrig[whichNumOrig] == tempNew[whichNumNew]) != length(whichNumOrig)) {
      err <- TRUE
    }
    if (err) {
      cat("Error with col ", commonCols[col_it], " in file ", origNames[file_it], "\n")
      cat(tempOrig, '\n')
      cat(tempNew, '\n')
    }
  }
}
 paste0("allZ_", betaStart, "_S", Snum, "_aID", aID, ".txt")
aID=101
Snum=1
# load libraries
library(mvtnorm)
library(data.table)
library(bindata)
library(dplyr)
library(magrittr)
setwd('/rsrch3/home/biostatistics/rsun3/github/ancillaryFunctions')
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
setwd('/rsrch3/home/biostatistics/rsun3/github/altSymmMix/R')
file.sources = list.files(pattern="*.R")
sapply(file.sources,source,.GlobalEnv)
#------------------------------------------------------------------#
# parameters to be changed
# set output directory 
outputDir <- "/rsrch3/home/biostatistics/rsun3/empBayes/reproduce/SuppFig9/output"
outName <- paste0("sim_n1k_j100k_ind5d_changeeff2_new_aID", aID, ".txt")
# option to save or load intermediate data to save time,
# set as FALSE for first run and then TRUE thereafter
loadData <- FALSE
saveData <- TRUE
# the name will be [testStatsName]_[betaStart]_S[Snum]_aID[aID].txt
testStatsName <- "allZ"
betaName <- "allBeta"
#-------------------------------------------------------------------#
# parameters
doHDMT <- FALSE
doDACT <- FALSE
doKernel <- FALSE
do50df <- FALSE
do7df <- FALSE
doNew <- TRUE
qvalue <- 0.1
nSNPs <- 10^5
setSize <- 1000
n <- 1000
nDims <- 5
nSets <- nSNPs / setSize
nSims <- 1
margprob <- rep(0.3, setSize)
simsPerEffSize <- 100
effSizeMult <- ceiling(aID / simsPerEffSize)
betaStart <- 0.24
betaMin <- rep(betaStart + 0.01 * effSizeMult, nDims)
betaMax <- rep(betaStart + 0.1 + 0.01 * effSizeMult, nDims)
beta0 <- -1
# determines how many signals there are
sProp <- c(0.9579, 0.04, 0.0012, 0.0006, 0.0000, 0.0003)
hMat <- expand.grid(rep(list(c(-1, 0, 1)), nDims)) %>%
  as.matrix(.) %>%
  cbind(., rowSums(abs(.))) %>%
  as.data.frame(.) %>%
  set_colnames(c(paste0("Var", 1:(ncol(.)-1)), "s")) %>%
  arrange(s)
number <- c()
for (s_it in 0:max(hMat$s)) {
  numRows <- length(which(hMat$s == s_it))
  number <- c(number, rep(sProp[s_it + 1] * nSNPs / numRows, numRows))
}
hMat <- hMat %>% mutate(number = number)
# record results here
powerRes <- data.frame(nCausal=rep(NA, nSims),  minEff1=betaMin[1],
                       seed=NA, pi0aTrue=NA, pi0bTrue=NA,
                       powerDACT=NA, powerHDMT=NA, powerKernel=NA, power7df=NA,
                       power50df=NA, powerNew=NA, fdpDACT=NA, fdpHDMT=NA, fdpKernel=NA, fdp7df=NA, fdp50df=NA, fdpNew=NA,
                       inconKernel=NA, incon7df=NA, incon50df=NA, inconNew=NA)
sim_it=1
 # set the seed 
  set.seed(aID * 10^5 + sim_it)
  powerRes$seed[sim_it] <- aID * 10^5 + sim_it
   # hold test statistics and signals
    allZ <- matrix(data=NA, nrow=nSNPs, ncol=2)
    allBeta <- matrix(data=NA, nrow=nSNPs, ncol=2)
    # select signal locations
    sigLocsMat <- allocate_sigs(hMat = hMat, nSNPs = nSNPs, nDims=nDims)
head(sigLocsMat)
  allZ <- matrix(data=NA, nrow=nSNPs, ncol=nDims)
    allBeta <- matrix(data=NA, nrow=nSNPs, ncol=nDims)
    # select signal locations
    sigLocsMat <- allocate_sigs(hMat = hMat, nSNPs = nSNPs, nDims=nDims)
    # generate data in multiple sets - faster than all at once
    for (set_it in 1:nSets)  {
      # generate coefficient matrix
      coefMat <- set_beta(sigLocsMat = sigLocsMat, set_it = set_it, setSize = setSize,
                       betaMin=betaMin, betaMax=betaMax)
      # two dimensional mediation case data generation for k=1 dimension
      tempG <- sapply(X=margprob, FUN=rbinom, n=n, size=2)
      adjG <- sweep(tempG, MARGIN=2, STATS=apply(tempG, 2, mean), FUN="-")
      tempAlpha <- coefMat[, 1]
      tempM <- sweep(tempG, MARGIN=2, STATS=tempAlpha, FUN="*") + matrix(data = rnorm(n=n*nrow(coefMat)), nrow=n, ncol=nrow(coefMat))
      adjM <- sweep(tempM, MARGIN=2, STATS=apply(tempM, 2, mean), FUN="-")
      sigSqHat <- apply(adjM, 2, myvar_fun)
      # calculate test statistics  for k=1
      statsMat <- matrix(data=NA, nrow=setSize, ncol=2)
      tempNum <- apply(adjG * adjM, 2, sum)
      tempDenom <- sqrt(apply(adjG^2, 2, sum) * sigSqHat)
      statsMat[, 1] <- tempNum / tempDenom
      # mediation data generation for k=2 dimension 
      tempBeta <- coefMat[, 2]
      tempEta <- sweep(tempM, MARGIN=2, STATS=tempBeta, FUN="*") + matrix(data=beta0, nrow=nrow(tempM), ncol=ncol(tempM))
      tempMu <- rje::expit(as.numeric(tempEta))
      tempY <- rbinom(n=length(tempMu), size=1, prob=tempMu)
      yMat <- matrix(data=tempY, nrow=nrow(tempEta), ncol=ncol(tempEta), byrow=FALSE)
      # calculate test statistics for k=2 
      for (test_it in 1:ncol(yMat)) {
        tempMod <- glm(yMat[, test_it] ~ tempG[, test_it] + tempM[, test_it], family=binomial)
        statsMat[test_it, 2] <- summary(tempMod)$coefficients[3, 3]
      }
      # record data
      startIdx <- (set_it - 1) * setSize + 1
      endIdx <- set_it * setSize
      allZ[startIdx:endIdx, ] <- statsMat
      allBeta[startIdx:endIdx, ] <- coefMat
      # checkpoint 
      if(set_it%%1 == 0) {cat(set_it)}
    } # done generating data
head(allZ)
statsMat
 # generate data in multiple sets - faster than all at once
    for (set_it in 1:nSets)  {
      
      # generate coefficient matrix
      coefMat <- set_beta(sigLocsMat = sigLocsMat, set_it = set_it, setSize = setSize,
                       betaMin=betaMin, betaMax=betaMax)
      
      # loop through each dimension 
      for (dimension_it in 1:nDims) {
        tempG <- sapply(X=margprob, FUN=rbinom, n=n, size=2)
        tempCoef <- coefMat[, dimension_it]
        
        # outcome
        tempEta <- sweep(tempG, MARGIN=2, STATS=tempCoef, FUN="*") + matrix(data=beta0, nrow=nrow(tempG), ncol=ncol(tempG))
        tempMu <- rje::expit(as.numeric(tempEta)) 
        tempY <- rbinom(n=length(tempMu), size=1, prob=tempMu)
        # put back in matrix form
        yMat <- matrix(data=tempY, nrow=nrow(tempEta), ncol=ncol(tempEta), byrow=FALSE)
        
        # loop through each SNP
        for (test_it in 1:ncol(yMat)) {
          tempMod <- glm(yMat[, test_it] ~ tempG[, test_it], family=binomial) 
          statsMat[test_it, dimension_it] <- summary(tempMod)$coefficients[2, 3]
        }
        cat("simulated dimension ", dimension_it, "\n")
      } 
      
      # record data
      startIdx <- (set_it - 1) * setSize + 1
      endIdx <- set_it * setSize
      allZ[startIdx:endIdx, ] <- statsMat
      allBeta[startIdx:endIdx, ] <- coefMat
      # checkpoint 
      if(set_it%%1 == 0) {cat(set_it)}
    } # done generating data
  tempG <- sapply(X=margprob, FUN=rbinom, n=n, size=2)
        tempCoef <- coefMat[, dimension_it]
        
        # outcome
        tempEta <- sweep(tempG, MARGIN=2, STATS=tempCoef, FUN="*") + matrix(data=beta0, nrow=nrow(tempG), ncol=ncol(tempG))
        tempMu <- rje::expit(as.numeric(tempEta)) 
        tempY <- rbinom(n=length(tempMu), size=1, prob=tempMu)
        # put back in matrix form
        yMat <- matrix(data=tempY, nrow=nrow(tempEta), ncol=ncol(tempEta), byrow=FALSE)
        
 # loop through each SNP
        for (test_it in 1:ncol(yMat)) {
          tempMod <- glm(yMat[, test_it] ~ tempG[, test_it], family=binomial) 
          statsMat[test_it, dimension_it] <- summary(tempMod)$coefficients[2, 3]
        }'
 # loop through each SNP
        for (test_it in 1:ncol(yMat)) {
          tempMod <- glm(yMat[, test_it] ~ tempG[, test_it], family=binomial) 
          statsMat[test_it, dimension_it] <- summary(tempMod)$coefficients[2, 3]
        }
dim(statsMat)
 # hold test statistics and signals
    allZ <- matrix(data=NA, nrow=nSNPs, ncol=nDims)
    allBeta <- matrix(data=NA, nrow=nSNPs, ncol=nDims)
    # select signal locations
    sigLocsMat <- allocate_sigs(hMat = hMat, nSNPs = nSNPs, nDims=nDims)
 
    # generate data in multiple sets - faster than all at once
    for (set_it in 1:nSets)  {
      # save test statistics      
      statsMat <- matrix(data=NA, nrow=setSize, ncol=nDims)
      # generate coefficient matrix
      coefMat <- set_beta(sigLocsMat = sigLocsMat, set_it = set_it, setSize = setSize,
                       betaMin=betaMin, betaMax=betaMax)
      # loop through each dimension
      for (dimension_it in 1:nDims) {
        tempG <- sapply(X=margprob, FUN=rbinom, n=n, size=2)
        tempCoef <- coefMat[, dimension_it]
        # outcome
        tempEta <- sweep(tempG, MARGIN=2, STATS=tempCoef, FUN="*") + matrix(data=beta0, nrow=nrow(tempG), ncol=ncol(tempG))
        tempMu <- rje::expit(as.numeric(tempEta))
        tempY <- rbinom(n=length(tempMu), size=1, prob=tempMu)
        # put back in matrix form
        yMat <- matrix(data=tempY, nrow=nrow(tempEta), ncol=ncol(tempEta), byrow=FALSE)
        # loop through each SNP
        for (test_it in 1:ncol(yMat)) {
          tempMod <- glm(yMat[, test_it] ~ tempG[, test_it], family=binomial)
          statsMat[test_it, dimension_it] <- summary(tempMod)$coefficients[2, 3]
        }
        cat("simulated dimension ", dimension_it, "\n")
      }
      # record data
      startIdx <- (set_it - 1) * setSize + 1
      endIdx <- set_it * setSize
      allZ[startIdx:endIdx, ] <- statsMat
      allBeta[startIdx:endIdx, ] <- coefMat
      # checkpoint 
      if(set_it%%1 == 0) {cat(set_it)}
    } # done generating data
